From dba82c1171cfddb53fc54fd1eb9f2be60b458a65 Mon Sep 17 00:00:00 2001
From: Bob Summerwill <bob@summerwill.net>
Date: Wed, 20 Nov 2019 23:29:11 -0800
Subject: [PATCH] Inline specification for 39-GAS and 40-UNUSED from
 that.world. Better to have these self-contained specifications right here.
 They are not complex.

---
 _specs/ecip-1065.md | 21 ++++++++++++++++-----
 1 file changed, 16 insertions(+), 5 deletions(-)

diff --git a/_specs/ecip-1065.md b/_specs/ecip-1065.md
index 1ac3526..b687297 100644
--- a/_specs/ecip-1065.md
+++ b/_specs/ecip-1065.md
@@ -28,11 +28,22 @@ At hard fork block, enable [EIP-1702](https://eips.ethereum.org/EIPS/eip-1702):
 * Define the previous EVM version as version `0`.
 * Define a new version `1`, with the following EVM modifications
   applied on it.
-  * **[39-UNGAS](https://specs.that.world/39-ungas/)**: Remove all
-    observable behavior of gas cost in EVM and change out-of-gas
-    exception to trap the whole transaction.
-  * **[40-UNUSED](https://specs.that.world/40-unused/)**: Disable
-    deployment of unused opcodes.
+  * Remove all observable behavior of gas cost in EVM by disabling
+    GAS code.
+  * Change out-of-gas exception to trap the whole transaction.
+  * For CALL, CALLCODE and DELEGATECALL, remove the gas parameter,
+    and instead always set the parameter to be the current
+    available gas left.
+  * Hard fork can change existing contract behavior. One of the
+    point can be raised about adding new opcodes is that it modifies existing unused opcodes from throwing out of gas to another behavior. While we can mostly argue that deploying unused opcode is not of much use so no sane developers would do that, it would be better to just disallow deployment of unused opcodes.
+  * Upon contract deployment, either through CREATE and CREATE2 opcode,
+    or via contract creation transaction, run an extra validation step:
+    * Iterate over the code bytes one by one.
+    * If the code byte is a PUSH(n) opcode, skip next n bytes.
+    * If the code byte is a valid opcode or designated invalid
+      instruction (0xfe), continue.
+    * Otherwise, throw out-of-gas.
+  * Note that this check is similar to jump destination checks.
   
 ### Discussion
 
