From 4ef35f941384942ead39e6bff52a4cce0e1d0e3e Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 30 Nov 2019 15:11:39 -0500
Subject: [PATCH 1/6] Introduce alternative approach; use PRs

---
 _specs/ecip-_.md | 34 ++++++++++++++++++++++------------
 1 file changed, 22 insertions(+), 12 deletions(-)

diff --git a/_specs/ecip-_.md b/_specs/ecip-_.md
index c0466fa..a456429 100644
--- a/_specs/ecip-_.md
+++ b/_specs/ecip-_.md
@@ -11,11 +11,23 @@ resolution: TBD
 
 ### Abstract
 
-Forking Meta ECIPs (defined as Meta ECIPs specifying any Standards-Core track ECIP and an activation block number) should be complete and unique.
+Forking Meta ECIPs (defined as Meta ECIPs _intended_ to specify any Standards-Core track ECIP and an activation block number) should contain only placeholder information
+for ECIP-sets and block activation numbers. Placeholders for ECIP-sets and block numbers should be filled via distinct change sets before moving from `Draft` to `Last Call` status.
+
+Changesets (eg Pull Requests) editing placeholder ECIP-set and block number information should do so with neither in isolation; PRs modifying only ECIP-set, or only block number,
+are disallowed.
 
 ### Motivation
 
-Incomplete proposals are inoperable; they are not ready for review, discussion, nor implementation.
+Allowing fully-formed alternative and "competing" ECIPs is logistically and practically difficult to use. Currently, our most prominently used collaboration tool, Github, does
+not provide an accessible UI for comparing arbitrary documents or review separate arbitrary documents as a conceptual set.
+
+Github does, however, provide an accessible user interface for Pull Requests (propsed change sets) against a single document.
+
+Forking Meta ECIPs represent a single idea: The next hardfork. This is a pragramtic and common sense approach to managing blockchain protocol maintenance and upgrades. Thus, it makes
+sense to use accessible and conceptually-unifying procedures for this challenge.
+
+Incomplete proposals (changesets) are inoperable; they are not ready for review, discussion, nor implementation.
 
 Unique proposals save time and redundant complexity.
 
@@ -36,33 +48,31 @@ Related to and derivative of:
 
 ### Specification
 
-A Forking Meta ECIP is defined as a Meta ECIP specifying any (`n >= 1`) Standards-Core track ECIP or ECIP-set. A Forking Meta ECIP should be complete and unique.
+A Forking Meta ECIP is defined as a Meta ECIP specifying any (`n >= 1`) Standards-Core track ECIP or ECIP-set. A Forking Meta ECIP should be conceptally complete and unique (_next hardfork_ suffices for uniqueness, since there can only be one).
 
 _Complete_ is defined as being fully and totally definitive; not lacking anything.
 
 _Unique_ means not the same as another thing; in this case, not precisely duplicating any existing ECIP.
 
-This proposal specifies that all Forking Meta ECIPs should be COMPLETE and UNIQUE; essentially disallowing `Draft` status Forking Meta ECIPs and and/or meaningful revisions (set ECIPs, block number).
-
-This implies that a valid Forking Meta ECIP must contain a full and complete set of to-be included ECIPs, and a definitive block number. 
+This proposal specifies that all Forking Meta ECIPs in `Draft` state or earlier should contain NO information about ECIP-sets or block activation numbers (all `TBD`). Proposed specifications to fill these placeholders should be made in the form of distinct and separate propsed change sets (eg Github Pull Requests) to the Forking Meta ECIP document. The changesets are required to be UNIQUE and COMPLETE.
 
 ### Rationale
 
 The sole purpose of a Forking Meta ECIP is to join a block number with a set of `n >= 1` ECIPs containing protocol-facing changes. The document says "_These_ features will activate at _this_ moment."
 
-0. __Fill-in-the-blank ECIPs are not in good form.__ Forking Meta ECIPs are themselves ECIPs, and their job is to define, with certainty and clarity, technical specifications. Forking Meta ECIPs that essentially leave either field `Block number` and/or field `ECIP set` blank are functionally useless (inoperable); they say only: "(I/we) propose to have some fork at some time." An analogue of blankness to non-Forking-Meta ECIPs would essentially say "TODO: put my next awesome feature specification here." 
+0. "Shell" format Forking Meta ECIPs represent a clear, albeit abstract, idea: The blockchain's next hard fork.
 
-1. __Demanding fully-formed Forking Meta ECIP proposals forces authors, editors, and reviewers to evaluate and document ECIP-set behavior and enables concrete discussion of feature sets as complete wholes.__ A Forking Meta ECIP may represent a plurality of features, and so in order to be an _operable_ specification it should not represent an ambiguous set. Sets of ECIPs can have interoperative dependencies and outcomes; this causes a conceptual permutation and combination challenge when attempting to design a set of ECIPs for simultaneous inclusion. 
+1. __Demanding fully-formed Forking Meta ECIP Changeset proposal forces authors, editors, and reviewers to evaluate and document ECIP-set behavior and enables concrete discussion of feature sets as complete wholes.__ A Forking Meta ECIP Changeset may represent a plurality of features, and so in order to be an _operable_ specification it should not represent an ambiguous set. Sets of ECIPs can have interoperative dependencies and outcomes; this causes a conceptual permutation and combination challenge when attempting to design a set of ECIPs for simultaneous inclusion. 
 
-2. __Forking Meta ECIPs without block numbers lack operability.__ Activation numbers _are specifications_ and should not be treated as a second class or at-convenience citizens. Implementation timelines are importantly related variables to their adjacent ECIP-sets (large set ostensibly require long timelines, hotfix sets require short ones.) We cannot reason about them in isolation.
+2. __Forking Meta ECIP Changesets without block numbers lack operability.__ Activation numbers _are specifications_ and should not be treated as a second class or at-convenience citizens. Implementation timelines are importantly related variables to their adjacent ECIP-sets (large set ostensibly require long timelines, hotfix sets require short ones.) We cannot reason about them in isolation.
 
-3. __Concrete ECIPs are easier to build language and reasoning around.__ Nuances of interoperations are documented and included in concrete proposals, leaving less theoretical abstract reasoning to manage, which is relevant in the context of group _and_ individual decision making. "Competing" Forking Meta ECIP alternatives become explicit and standardized, yielding conceptual and communicable clarity in review processes and decision-making processes.
+3. __Concrete things are easier to build language and reasoning around.__ Nuances of interoperations are documented and included in concrete proposals, leaving less theoretical abstract reasoning to manage, which is relevant in the context of group _and_ individual decision making. "Competing" Forking Meta ECIP Changeset alternatives become explicit and standardized, yielding conceptual and communicable clarity in review processes and decision-making processes.
 
 ### Implementation
 
-A Forking Meta ECIP may not be in `Draft` status. It may not undergo any meaningful changes once receiving `Last Call` status (its next status beyond `WIP`).
+A Forking Meta ECIP may only achieve `Last Call` status once a Changeset has been accepted and all other alternative marked as `Deferred`, `Withdrawn`, or `Rejected`.
 
-Procedurally, compared to the historical and traditional practice of opening an essentially empty Forking Meta ECIP and working to fill in blanks, this proposed procedure makes only marginal and changes, demanding only that what was taken as implication, subtext, or conteext before now be made explicit. Rather than reviewing actual-or-theoretical proposed change sets to an ECIP (which sadly, have historically usually been theoretical), this forces proposed Forking Meta ECIP alternative outcomes to assume a fully qualified and standardized formats before becoming eligible for consideration. 
+This proposed procedure makes only marginal and changes, demanding only that what was taken as implication, subtext, or conteext before now be made explicit. Rather than reviewing actual-or-theoretical proposed changesets to an ECIP (which sadly, have historically usually been theoretical), this forces proposed Forking Meta ECIP alternative outcomes to assume a fully qualified and standardized formats before becoming eligible for consideration. 
 
 ### Copyright/Licensing
 

From cf85164c0c34f785b03badc78ab2d72ce4fd323e Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 30 Nov 2019 16:19:10 -0500
Subject: [PATCH 2/6] Fix typo

---
 _specs/ecip-_.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/_specs/ecip-_.md b/_specs/ecip-_.md
index a456429..fa978bb 100644
--- a/_specs/ecip-_.md
+++ b/_specs/ecip-_.md
@@ -72,7 +72,7 @@ The sole purpose of a Forking Meta ECIP is to join a block number with a set of
 
 A Forking Meta ECIP may only achieve `Last Call` status once a Changeset has been accepted and all other alternative marked as `Deferred`, `Withdrawn`, or `Rejected`.
 
-This proposed procedure makes only marginal and changes, demanding only that what was taken as implication, subtext, or conteext before now be made explicit. Rather than reviewing actual-or-theoretical proposed changesets to an ECIP (which sadly, have historically usually been theoretical), this forces proposed Forking Meta ECIP alternative outcomes to assume a fully qualified and standardized formats before becoming eligible for consideration. 
+This proposed procedure makes only marginal and changes, demanding only that what was taken as implication, subtext, or context before now be made explicit. Rather than reviewing actual-or-theoretical proposed changesets to an ECIP (which sadly, have historically usually been theoretical), this forces proposed Forking Meta ECIP alternative outcomes to assume a fully qualified and standardized formats before becoming eligible for consideration. 
 
 ### Copyright/Licensing
 

From 184551556a4721bad1bcd95aa4ee6f25d90c3847 Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 30 Nov 2019 17:24:40 -0500
Subject: [PATCH 3/6] Use assigned ECIP number 1077

---
 _specs/ecip-_.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/_specs/ecip-_.md b/_specs/ecip-_.md
index fa978bb..1d092a9 100644
--- a/_specs/ecip-_.md
+++ b/_specs/ecip-_.md
@@ -1,5 +1,5 @@
 ---
-ecip: TBD
+ecip: 1077
 title: The Meta Meta ECIP: Processes for Meta ECIPs
 author: Mr. Meows D. Bits
 discussions-to: TBD

From e8c68d8fb25abb0cba9ac7d8026683e9f61bce02 Mon Sep 17 00:00:00 2001
From: meows <b5c6@protonmail.com>
Date: Sat, 30 Nov 2019 17:25:27 -0500
Subject: [PATCH 4/6] Rename ECIP file to reflect assigned number (1077)

---
 _specs/{ecip-_.md => ecip-1077.md} | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename _specs/{ecip-_.md => ecip-1077.md} (100%)

diff --git a/_specs/ecip-_.md b/_specs/ecip-1077.md
similarity index 100%
rename from _specs/ecip-_.md
rename to _specs/ecip-1077.md

From ec70aa2190446d2a73c7e6f50faa6f1bd7255643 Mon Sep 17 00:00:00 2001
From: ia <b5c6@protonmail.com>
Date: Sat, 30 Nov 2019 17:26:21 -0500
Subject: [PATCH 5/6] Revert "Rename ECIP file to reflect assigned number
 (1077)"

This reverts commit e8c68d8fb25abb0cba9ac7d8026683e9f61bce02.
---
 _specs/{ecip-1077.md => ecip-_.md} | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 rename _specs/{ecip-1077.md => ecip-_.md} (100%)

diff --git a/_specs/ecip-1077.md b/_specs/ecip-_.md
similarity index 100%
rename from _specs/ecip-1077.md
rename to _specs/ecip-_.md

From a81b724c7beacd43a226df78bfe3d8ca45aacf27 Mon Sep 17 00:00:00 2001
From: ia <b5c6@protonmail.com>
Date: Sat, 30 Nov 2019 17:26:32 -0500
Subject: [PATCH 6/6] Revert "Use assigned ECIP number 1077"

This reverts commit 184551556a4721bad1bcd95aa4ee6f25d90c3847.
---
 _specs/ecip-_.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/_specs/ecip-_.md b/_specs/ecip-_.md
index 1d092a9..fa978bb 100644
--- a/_specs/ecip-_.md
+++ b/_specs/ecip-_.md
@@ -1,5 +1,5 @@
 ---
-ecip: 1077
+ecip: TBD
 title: The Meta Meta ECIP: Processes for Meta ECIPs
 author: Mr. Meows D. Bits
 discussions-to: TBD
