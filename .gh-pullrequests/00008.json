{
    "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/8",
    "repository_url": "https://api.github.com/repos/ethereumclassic/ECIPs",
    "labels_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/8/labels{/name}",
    "comments_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/8/comments",
    "events_url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/8/events",
    "html_url": "https://github.com/ethereumclassic/ECIPs/pull/8",
    "id": 396774235,
    "node_id": "MDExOlB1bGxSZXF1ZXN0MjQyODc0NjMw",
    "number": 8,
    "title": "ECIP-1049: Change the ETC Proof of Work Algorithm to Keccak256",
    "user": {
      "login": "p3c-bot",
      "id": 40745785,
      "node_id": "MDQ6VXNlcjQwNzQ1Nzg1",
      "avatar_url": "https://avatars1.githubusercontent.com/u/40745785?v=4",
      "gravatar_id": "",
      "url": "https://api.github.com/users/p3c-bot",
      "html_url": "https://github.com/p3c-bot",
      "followers_url": "https://api.github.com/users/p3c-bot/followers",
      "following_url": "https://api.github.com/users/p3c-bot/following{/other_user}",
      "gists_url": "https://api.github.com/users/p3c-bot/gists{/gist_id}",
      "starred_url": "https://api.github.com/users/p3c-bot/starred{/owner}{/repo}",
      "subscriptions_url": "https://api.github.com/users/p3c-bot/subscriptions",
      "organizations_url": "https://api.github.com/users/p3c-bot/orgs",
      "repos_url": "https://api.github.com/users/p3c-bot/repos",
      "events_url": "https://api.github.com/users/p3c-bot/events{/privacy}",
      "received_events_url": "https://api.github.com/users/p3c-bot/received_events",
      "type": "User",
      "site_admin": false
    },
    "labels": [

    ],
    "state": "closed",
    "locked": false,
    "assignee": null,
    "assignees": [

    ],
    "milestone": null,
    "comments": 18,
    "created_at": "2019-01-08T06:59:46Z",
    "updated_at": "2019-10-28T19:36:24Z",
    "closed_at": "2019-01-17T04:06:11Z",
    "author_association": "CONTRIBUTOR",
    "pull_request": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/pulls/8",
      "html_url": "https://github.com/ethereumclassic/ECIPs/pull/8",
      "diff_url": "https://github.com/ethereumclassic/ECIPs/pull/8.diff",
      "patch_url": "https://github.com/ethereumclassic/ECIPs/pull/8.patch"
    },
    "body": "# THIS PROPOSAL IS MERGED DISCUSSION HAS BEEN MOVED TO [HERE](https://github.com/ethereumclassic/ECIPs/issues/13)\r\n\r\n\r\n### What is an ECIP?\r\n\r\n    ECIP: 1049\r\n    Title: Change the ETC Proof of Work Algorithm to Keccak256\r\n    Status: Draft\r\n    Type: Network\r\n    Discussion: https://github.com/ethereumclassic/ECIPs/pull/8\r\n    Author: Alexander Tsankov (alexander.tsankov@colorado.edu)\r\n    Created: 2019-01-08\r\n\r\n### Abstract\r\nA proposal to replace the current Ethereum Classic proof of work algorithm with Keccak-256.\r\n\r\n### Motivation\r\n* A response to the recent double-spend attacks against Ethereum Classic. Most of this hashpower was rented or came from other chains, specfically Ethereum (ETH). A seperate proof of work algorithm would encourage the development of a specialized Ethereum Classic mining community, and blunt the ability for attackers to purchase mercenary hash power on the open-market. \r\n\r\n* As a secondary benefit, deployed smart contracts and dapps running on chain are currently able to use `keccak256()` in their code. This ECIP could open the possibility of smart contracts being able to evaluate chain state, and simplify second layer (L2) development.\r\n\r\n### Specification\r\n\r\n### Reason 1: Similarity to Bitcoin\r\nThe Bitcoin network currently uses the CPU-intensive SHA256 Algorithm to evaluate blocks. When Ethereum was deployed it used a different algorithm, Dagger-Hashimoto, which eventually became Ethash on 1.0 launch. Dagger-Hashimoto was explicitly designed to be memory-intensive with the goal of ASIC resistance [1]. It has been provably unsuccessful at this goal, with Ethash ASICs currently easily availalble on the market.\r\n\r\nKeccak256 (aka SHA3) is the product of decades of research and the winner of a multi-year contest held by NIST that has rigorously verified its robustness and quality as a hashing algorithm. It is one of the only hashing algorithms besides SHA256 that is allowed for military and scientific-grade applications, and can provide sufficient hashing entropy for a proof of work system. This algorithm would position Ethereum Classic at an advantage in mission-critical blockchain applications that are required to use provably high-strength algorithms. [2]\r\n\r\nA CPU-intensive algorithm like Keccak256 would allow both the uniqueness of a fresh PoW algorithm that has not had ASICs developed against it, while at the same time allowing for organic optimization of a dedicated and financially commited miner base, much the way Bitcoin did with its own SHA256 algorithm.\r\n\r\nIf Ethereum Classic is to succeed as a project, we need to take what we have learned from Bitcoin and move towards CPU-hard PoW algorithms.\r\n\r\n> At first, most users would run network nodes, but as the network grows beyond a certain point, it would be left more and more to specialists with server farms of specialized hardware. - Satoshi Nakamoto (2008-11-03) [3]\r\n\r\n*Note: Please consider this is from 2008, and the Bitcoin community at that time did not differentiate between node operators and miners. I interpret \"network nodes\" in this quote to refer to miners, and \"server farms of specialized hardware\" to refer to mining farms.*\r\n\r\n\r\n### Reason 2: Value to Smart Contract Developers\r\nIn Solidity, developers have access to the `keccak256()` function, which allows a smart contract to efficiently calculate the hash of a given input. This has been used in a number of interesting projects launched on both Ethereum and Ethereum-Classic. Most Specifcally a project called 0xBitcoin [4] - which the ERC-918 spec was based on.\r\n\r\n0xBitcoin is a security-audited [5] dapp that allows users to submit a proof of work hash directly to a smart contract running on the Ethereum blockchain. If the sent hash matches the given requirements, a token reward is trustlessly dispensed to the sender, along with the contract reevaluating difficulty parameters. This project has run successfully for over 10 months, and has minted over 3 million tokens [6].\r\n\r\nWith the direction that Ethereum Classic is taking: a focus on Layer-2 solutions and cross-chain compatibility; being able to evaluate proof of work on chain, will be tremendously valuable to developers of both smart-contracts and node software writers. This could greatly simplify interoperability. \r\n\r\n### Implementation\r\n\r\nWork in Progress:\r\n\r\nExample of a Smart contract hashing being able to trustlessly Keccak hash a hypothetical block header.\r\n![example](https://i.imgur.com/xh3WgCF.png)\r\n\r\nHere is an analysis of Monero's nonce-distribution for \"cryptonight\", an algorithm similar to Ethash, which also attempts to be \"ASIC-Resistant\" it is very clear in the picture that before the hashing algorithm is changed there is a clear nonce-pattern. This is indicative of a major failure in a hashing algorithm, and should illustrate the dangers of disregarding proper cryptographic security. Finding a hashing pattern would be far harder using a proven system like Keccak:\r\n\r\n![example](https://i.imgur.com/vVdmzm9.jpg)\r\n\r\nBased on analysis of the EVM architecture [here](https://cdn.discordapp.com/attachments/223675625334898688/534597157693685760/eth.jpg) there are two main pieces that need to be changed:\r\n\r\n1. The Proof of work function needs to be replaced with Keccak256\r\n1. The Function that checks the nonce-header  in the block needs to know to accept Keccak256 hashes as valid for a block.\r\n\r\n![example](https://i.imgur.com/2hobqOL.png)\r\n\r\nAfter doing further analysis it the best way forward to begin work is to implement this change in [Multi-Geth](https://github.com/ethoxy/multi-geth) instead of any other client. This is because Multi-geth is organized for multi-chain development, it seems to be more recently updated than classic-geth, and it is designed to be used with alternative consensus methods- which is necessary for implementing ECIP-1049.\r\n\r\nThe area where most of the changes will be in `multi-geth/consensus`\r\n\r\n### References: \r\n\r\n1. https://github.com/ethereum/wiki/wiki/Dagger-Hashimoto#introduction\r\n1. https://en.wikipedia.org/wiki/SHA-3\r\n1. https://satoshi.nakamotoinstitute.org/emails/cryptography/2/\r\n1. https://github.com/0xbitcoin/white-paper\r\n1. https://github.com/EthereumCommonwealth/Auditing/issues/102\r\n1. https://etherscan.io/address/0xb6ed7644c69416d67b522e20bc294a9a9b405b31",
    "reactions": {
      "url": "https://api.github.com/repos/ethereumclassic/ECIPs/issues/8/reactions",
      "total_count": 3,
      "+1": 0,
      "-1": 3,
      "laugh": 0,
      "hooray": 0,
      "confused": 0,
      "heart": 0,
      "rocket": 0,
      "eyes": 0
    }
  }